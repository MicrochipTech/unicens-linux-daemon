<?xml version="1.0" encoding="UTF-8"?>

<!-- committed 2018-04-20 -->
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" attributeFormDefault="unqualified">
	<xs:element name="Unicens">
		<xs:annotation>
			<xs:documentation>
				<UCSElementPath>/Unicens</UCSElementPath>
Schema for the description of a UNICENS configuration</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="SpecifiedElement">
					<xs:choice maxOccurs="unbounded">
						<xs:element name="Node">
							<xs:annotation>
								<xs:documentation>
									<UCSElementPath>/Unicens/Node</UCSElementPath>
Node is a connection point that can receive, create, store or send data along distributed network routes.</xs:documentation>
							</xs:annotation>
							<xs:complexType>
								<xs:complexContent>
									<xs:extension base="SpecifiedElement">
										<xs:sequence>
											<xs:element name="Configuration" minOccurs="0" maxOccurs="unbounded">
												<xs:complexType>
													<xs:sequence>
														<xs:element name="Contents" maxOccurs="unbounded">
															<xs:complexType>
																<xs:simpleContent>
																	<xs:extension base="xs:string">
																		<xs:attribute name="Name" type="xs:string" use="required"/>
																		<xs:attribute ref="Version"/>
																	</xs:extension>
																</xs:simpleContent>
															</xs:complexType>
														</xs:element>
														<xs:element name="Properties" minOccurs="0" maxOccurs="unbounded">
															<xs:complexType>
																<xs:simpleContent>
																	<xs:extension base="xs:string">
																		<xs:attribute name="Name" type="xs:string" use="required"/>
																		<xs:attribute ref="Version"/>
																	</xs:extension>
																</xs:simpleContent>
															</xs:complexType>
														</xs:element>
													</xs:sequence>
													<xs:attribute name="Type" type="xs:string" use="required"/>
													<xs:attribute ref="Version"/>
												</xs:complexType>
											</xs:element>
											<xs:choice minOccurs="0" maxOccurs="unbounded">
												<xs:element name="USBPort">
													<xs:annotation>
														<xs:documentation>
															<UCSElementPath>/Unicens/Node/USBPort</UCSElementPath>
Configuration Structure of a USB Port</xs:documentation>
													</xs:annotation>
													<xs:complexType>
														<xs:complexContent>
															<xs:extension base="SpecifiedElement">
																<xs:attribute name="PhysicalLayer" type="USBPortPhysicalLayer" use="required">
																	<xs:annotation>
																		<xs:documentation>
																			<UCSElementPath>/Unicens/Node/USBPort/@PhysicalLayer</UCSElementPath>
Interface of the USB Ports Physical Layer
This attribute corresponds with the parameter PhysicalLayer of the INIC function INIC.USBPortCreate.
</xs:documentation>
																	</xs:annotation>
																</xs:attribute>
																<xs:attribute name="DeviceInterfaces" type="Number" use="required">
																	<xs:annotation>
																		<xs:documentation>
																			<UCSElementPath>/Unicens/Node/USBPort/@DeviceInterfaces</UCSElementPath>
USB Devices interfaces mask.
This attribute corresponds with the parameter DeviceInterfaces of the INIC function INIC.USBPortCreate.</xs:documentation>
																	</xs:annotation>
																</xs:attribute>
																<xs:attribute name="StreamingIfEpInCount" type="Number" use="required">
																	<xs:annotation>
																		<xs:documentation>
																			<UCSElementPath>/Unicens/Node/USBPort/@StreamingIfEpInCount</UCSElementPath>
IN Endpoints inside the streaming interfaces.
This attribute corresponds with the parameter StreamingIfEpInCount of the INIC function INIC.USBPortCreate.</xs:documentation>
																	</xs:annotation>
																</xs:attribute>
																<xs:attribute name="StreamingIfEpOutCount" type="Number" use="required">
																	<xs:annotation>
																		<xs:documentation>
																			<UCSElementPath>/Unicens/Node/USBPort/@StreamingIfEpOutCount</UCSElementPath>
OUT Endpoints inside the streaming interfaces.
This attribute corresponds with the parameter StreamingIfEpInCount of the INIC function INIC.USBPortCreate.</xs:documentation>
																	</xs:annotation>
																</xs:attribute>
															</xs:extension>
														</xs:complexContent>
													</xs:complexType>
												</xs:element>
												<xs:element name="MediaLBPort">
													<xs:annotation>
														<xs:documentation>
															<UCSElementPath>/Unicens/Node/MediaLBPort</UCSElementPath>
Configuration Structure of a MediaLB Port
The MediaLB Port is the interface to the Media Local Bus. 
It supports the handling of all network data types and is available in two pin-out options: MediaLB 3-Pin (single-ended) and MediaLB 6-Pin (differential). </xs:documentation>
													</xs:annotation>
													<xs:complexType>
														<xs:complexContent>
															<xs:extension base="SpecifiedElement">
																<xs:attribute name="ClockConfig" type="MediaLBPortClockConfig" use="required">
																	<xs:annotation>
																		<xs:documentation>
																			<UCSElementPath>/Unicens/Node/MediaLBPort/@ClockConfig</UCSElementPath>
Clock speed configuration.
This attribute corresponds with the parameter ClockConfig of the INIC function INIC.MediaLBPortCreate.</xs:documentation>
																	</xs:annotation>
																</xs:attribute>
															</xs:extension>
														</xs:complexContent>
													</xs:complexType>
												</xs:element>
												<xs:element name="StreamPort">
													<xs:annotation>
														<xs:documentation>
															<UCSElementPath>/Unicens/Node/StreamPort</UCSElementPath>
Configuration Structure of a Stream Port</xs:documentation>
													</xs:annotation>
													<xs:complexType>
														<xs:complexContent>
															<xs:extension base="SpecifiedElement">
																<xs:attribute name="ClockConfig" type="StreamPortClockConfig" use="required">
																	<xs:annotation>
																		<xs:documentation>
																			<UCSElementPath>/Unicens/Node/StreamPort/@ClockConfig</UCSElementPath>
Clock speed configuration.
This attribute corresponds with the parameter ClockConfig of the INIC function INIC.StreamPortCreate.</xs:documentation>
																	</xs:annotation>
																</xs:attribute>
																<xs:attribute name="DataAlignment" type="StreamPortDataAlignment" use="required">
																	<xs:annotation>
																		<xs:documentation>
																			<UCSElementPath>/Unicens/Node/StreamPort/@DataAlignment</UCSElementPath>
Alignment of the data bytes .
This attribute corresponds with the parameter DataAlignment of the INIC function INIC.StreamPortCreate</xs:documentation>
																	</xs:annotation>
																</xs:attribute>
															</xs:extension>
														</xs:complexContent>
													</xs:complexType>
												</xs:element>
											</xs:choice>
											<xs:choice minOccurs="0" maxOccurs="unbounded">
												<xs:element name="SyncConnection">
													<xs:annotation>
														<xs:documentation>
															<UCSElementPath>/Unicens/Node/SyncConnection</UCSElementPath>
Configuration Structure of a SyncConnection It sets the connection in Sync mode.</xs:documentation>
													</xs:annotation>
													<xs:complexType>
														<xs:complexContent>
															<xs:extension base="Connection">
																<xs:attribute name="MuteMode" type="SyncConnectionMuteMode" use="optional">
																	<xs:annotation>
																		<xs:documentation>
																			<UCSElementPath>/Unicens/Node/SyncConnection/@MuteMode</UCSElementPath>
Mode of operation of mute.
This attribute corresponds with the parameter MuteMode of the INIC function INIC.SyncCreate</xs:documentation>
																	</xs:annotation>
																</xs:attribute>
															</xs:extension>
														</xs:complexContent>
													</xs:complexType>
												</xs:element>
												<xs:element name="AVPConnection">
													<xs:annotation>
														<xs:documentation>
															<UCSElementPath>/Unicens/Node/AVPConnection</UCSElementPath>
Configuration Structure of an AVP Connection. It sets the connection in AVP mode.</xs:documentation>
													</xs:annotation>
													<xs:complexType>
														<xs:complexContent>
															<xs:extension base="Connection">
																<xs:attribute name="IsocPacketSize" type="AVPConnectionIsocPacketSize" use="required">
																	<xs:annotation>
																		<xs:documentation>
																			<UCSElementPath>/Unicens/Node/AVPConnection/@IsocPacketSize</UCSElementPath>
Size of data packets.
This attribute corresponds with the parameter IsocPacketSize of the INIC function INIC.AVPacketizedCreate</xs:documentation>
																	</xs:annotation>
																</xs:attribute>
															</xs:extension>
														</xs:complexContent>
													</xs:complexType>
												</xs:element>
											</xs:choice>
										</xs:sequence>
										<xs:attribute name="Address" type="Number" use="required">
											<xs:annotation>
												<xs:documentation>
													<UCSElementPath>/Unicens/Node/@Address</UCSElementPath>
Address of the Unicens node</xs:documentation>
											</xs:annotation>
										</xs:attribute>
										<xs:attribute name="Script" type="xs:string" use="optional">
											<xs:annotation>
												<xs:documentation>
													<UCSElementPath>/Unicens/Node/@Script</UCSElementPath>
Script to which the node is linked.</xs:documentation>
											</xs:annotation>
										</xs:attribute>
										<xs:attribute name="Role" use="optional">
											<xs:simpleType>
												<xs:restriction base="xs:string">
													<xs:enumeration value="Root"/>
													<xs:enumeration value="Slim"/>
													<xs:enumeration value="Smart"/>
												</xs:restriction>
											</xs:simpleType>
										</xs:attribute>
										<xs:attribute name="NetworkController" use="optional">
											<xs:simpleType>
												<xs:restriction base="xs:string">
													<xs:enumeration value="OS81118"/>
													<xs:enumeration value="OS81119"/>
													<xs:enumeration value="OS81210"/>
													<xs:enumeration value="OS81212"/>
													<xs:enumeration value="OS81214"/>
													<xs:enumeration value="OS81216"/>
												</xs:restriction>
											</xs:simpleType>
										</xs:attribute>
										<xs:attribute name="NetworkControllerVersion" type="xs:string" use="optional"/>
									</xs:extension>
								</xs:complexContent>
							</xs:complexType>
						</xs:element>
						<xs:element name="Script">
							<xs:annotation>
								<xs:documentation>
									<UCSElementPath>/Unicens/Script</UCSElementPath>
A script is a structure data composed of :
The command based on INIC FBlock-Syntax to be transmitted
The expected result also based on INIC FBlock-Syntax.
The amount time [in milliseconds] to pause before sending the Tx command.

</xs:documentation>
							</xs:annotation>
							<xs:complexType>
								<xs:complexContent>
									<xs:extension base="DescribedElement">
										<xs:sequence>
											<xs:choice maxOccurs="unbounded">
												<xs:element name="GPIOPortCreate">
													<xs:annotation>
														<xs:documentation>
															<UCSElementPath>/Unicens/Script/GPIOPortCreate</UCSElementPath>
Creates the GPIO port with its associated port instance identifier.</xs:documentation>
													</xs:annotation>
													<xs:complexType>
														<xs:complexContent>
															<xs:extension base="SpecifiedElement">
																<xs:attribute name="DebounceTime" type="Number" use="required">
																	<xs:annotation>
																		<xs:documentation>
																			<UCSElementPath>/Unicens/Script/GPIOPortCreate/@DebounceTime</UCSElementPath>
The timeout for the GPIO debounce timer (in ms).
</xs:documentation>
																	</xs:annotation>
																</xs:attribute>
															</xs:extension>
														</xs:complexContent>
													</xs:complexType>
												</xs:element>
												<xs:element name="GPIOPortPinMode">
													<xs:annotation>
														<xs:documentation>
															<UCSElementPath>/Unicens/Script/GPIOPortPinMode</UCSElementPath>
This function is used for GPIO pin configuration.
To change a pin into a GPIO pin, it has to be configured via GPIOPortPinMode</xs:documentation>
													</xs:annotation>
													<xs:complexType>
														<xs:complexContent>
															<xs:extension base="SpecifiedElement">
																<xs:attribute name="PinConfiguration" type="HexData" use="required">
																	<xs:annotation>
																		<xs:documentation>
																			<UCSElementPath>/Unicens/Script/GPIOPortPinMode/@PinConfiguration</UCSElementPath>
Defines the GPIO pin configuration and clears the trigger conditions on level-sensitive inputs and sticky inputs thereby allowing reporting of further trigger events.
Note that trigger conditions are automatically cleared for all edge-sensitive input/output GPIO classes when the INIC.GPIOPortTriggerEvent.Status message is sent.</xs:documentation>
																	</xs:annotation>
																</xs:attribute>
															</xs:extension>
														</xs:complexContent>
													</xs:complexType>
												</xs:element>
												<xs:element name="GPIOPinState">
													<xs:annotation>
														<xs:documentation>
															<UCSElementPath>/Unicens/Script/GPIOPinState</UCSElementPath>Function used for GPIO pin state configuration</xs:documentation>
													</xs:annotation>
													<xs:complexType>
														<xs:complexContent>
															<xs:extension base="SpecifiedElement">
																<xs:attribute name="Mask" type="Number" use="required">
																	<xs:annotation>
																		<xs:documentation>
																			<UCSElementPath>/Unicens/Script/GPIOPinState/@Mask</UCSElementPath>
 Specifies the GPIO pin to be written. GPIO pins that can’t be used are ignored</xs:documentation>
																	</xs:annotation>
																</xs:attribute>
																<xs:attribute name="Data" type="Number" use="required">
																	<xs:annotation>
																		<xs:documentation>
																			<UCSElementPath>/Unicens/Script/GPIOPinState/@Data</UCSElementPath>  
Specifies the state of the GPIO pin to be written. GPIO pins that can’t be used are ignored</xs:documentation>
																	</xs:annotation>
																</xs:attribute>
															</xs:extension>
														</xs:complexContent>
													</xs:complexType>
												</xs:element>
												<xs:element name="I2CPortCreate">
													<xs:annotation>
														<xs:documentation>
															<UCSElementPath>/Unicens/Script/I2CPortCreate</UCSElementPath>
This function is used to define the I2C Port working as I2C-bus master. 
The function creates the I2C Port with its associated port instance identifier. 

</xs:documentation>
													</xs:annotation>
													<xs:complexType>
														<xs:complexContent>
															<xs:extension base="SpecifiedElement">
																<xs:attribute name="Speed" type="I2CPortCreateSpeed" use="required">
																	<xs:annotation>
																		<xs:documentation>
																			<UCSElementPath>/Unicens/Script/I2CPortCreate/@Speed</UCSElementPath>
The speed grade of I2C port.</xs:documentation>
																	</xs:annotation>
																</xs:attribute>
															</xs:extension>
														</xs:complexContent>
													</xs:complexType>
												</xs:element>
												<xs:element name="I2CPortWrite">
													<xs:annotation>
														<xs:documentation>
															<UCSElementPath>/Unicens/Script/I2CPortWrite</UCSElementPath>
This function writes a block of bytes to an I2C device at a specified I2C address. 
The function supports also a burst write mechanism for optimized transactions.

</xs:documentation>
													</xs:annotation>
													<xs:complexType>
														<xs:complexContent>
															<xs:extension base="SpecifiedElement">
																<xs:attribute name="Mode" type="I2CPortWriteMode" use="optional">
																	<xs:annotation>
																		<xs:documentation>
																			<UCSElementPath>/Unicens/Script/I2CPortWrite/@Mode</UCSElementPath>
The write transfer mode.</xs:documentation>
																	</xs:annotation>
																</xs:attribute>
																<xs:attribute name="BlockCount" type="Number" use="optional">
																	<xs:annotation>
																		<xs:documentation>
																			<UCSElementPath>/Unicens/Script/I2CPortWrite/@BlockCount</UCSElementPath>
The number of blocks to be written to the I2C address.
If parameter mode is not set to Burst Mode, the value of block_count has to be set to 0.
Otherwise the valid range of this parameter goes from 1 to 30. </xs:documentation>
																	</xs:annotation>
																</xs:attribute>
																<xs:attribute name="Address" type="Number" use="required">
																	<xs:annotation>
																		<xs:documentation>
																			<UCSElementPath>/Unicens/Script/I2CPortWrite/@Address</UCSElementPath>
Address of the target device. Use the UCS_ADDR_LOCAL_DEV macro to target the local device. 
The following address ranges are supported:
•[0x10 ... 0x2FF]
•[0x500 ... 0xFEF]
•UCS_ADDR_LOCAL_DEV </xs:documentation>
																	</xs:annotation>
																</xs:attribute>
																<xs:attribute name="Length" type="Number" use="optional">
																	<xs:annotation>
																		<xs:documentation>
																			<UCSElementPath>/Unicens/Script/I2CPortWrite/@Length</UCSElementPath>
The total number of bytes to be written to the addressed I2C peripheral. 
Even if parameter mode is set to Burst Mode, the data_len shall correspond to the whole size of the burst transfer.
That is, the data_len shall equal the size of a block times the block_count value.</xs:documentation>
																	</xs:annotation>
																</xs:attribute>
																<xs:attribute name="Payload" type="HexData" use="required">
																	<xs:annotation>
																		<xs:documentation>
																			<UCSElementPath>/Unicens/Script/I2CPortWrite/@Payload</UCSElementPath>
Payload bytes to be written on I2C</xs:documentation>
																	</xs:annotation>
																</xs:attribute>
																<xs:attribute name="Timeout" type="Number" use="optional">
																	<xs:annotation>
																		<xs:documentation>
																			<UCSElementPath>/Unicens/Script/I2CPortWrite/@Timeout</UCSElementPath>
The timeout for the I2C Port write. </xs:documentation>
																	</xs:annotation>
																</xs:attribute>
															</xs:extension>
														</xs:complexContent>
													</xs:complexType>
												</xs:element>
												<xs:element name="I2CPortRead">
													<xs:annotation>
														<xs:documentation>
															<UCSElementPath>/Unicens/Script/I2CPortRead</UCSElementPath>
This function reads a block of bytes from an I2C device at a specified I2C address.
The function can only be used, if the I2C Port has been configured as Master. 
If the I2C Port was configured as I2C-bus slave via the configuration string, an error message will be returned.  
</xs:documentation>
													</xs:annotation>
													<xs:complexType>
														<xs:complexContent>
															<xs:extension base="SpecifiedElement">
																<xs:attribute name="Address" type="Number" use="required">
																	<xs:annotation>
																		<xs:documentation>
																			<UCSElementPath>/Unicens/Script/I2CPortRead/@Address</UCSElementPath>
Address of the target device. Use the UCS_ADDR_LOCAL_DEV macro to target the local device. 
The following address ranges are supported:
•[0x10 ... 0x2FF]
•[0x500 ... 0xFEF]
•UCS_ADDR_LOCAL_DEV </xs:documentation>
																	</xs:annotation>
																</xs:attribute>
																<xs:attribute name="Length" type="Number" use="required">
																	<xs:annotation>
																		<xs:documentation>
																			<UCSElementPath>/Unicens/Script/I2CPortRead/@Length</UCSElementPath>
Number of bytes to be read from the address.</xs:documentation>
																	</xs:annotation>
																</xs:attribute>
																<xs:attribute name="Timeout" type="Number" use="optional">
																	<xs:annotation>
																		<xs:documentation>
																			<UCSElementPath>/Unicens/Script/I2CPortRead/@Timeout</UCSElementPath>
The timeout for the I2C Port read.</xs:documentation>
																	</xs:annotation>
																</xs:attribute>
															</xs:extension>
														</xs:complexContent>
													</xs:complexType>
												</xs:element>
												<xs:element name="MsgSend">
													<xs:annotation>
														<xs:documentation>
															<UCSElementPath>/Unicens/Script/MsgSend</UCSElementPath>
A command that sends INIC message to the node to which that script is assigned</xs:documentation>
													</xs:annotation>
													<xs:complexType>
														<xs:complexContent>
															<xs:extension base="SpecifiedElement">
																<xs:attribute name="FBlockId" type="Number" use="required">
																	<xs:annotation>
																		<xs:documentation>
																			<UCSElementPath>/Unicens/Script/MsgSend/@FBlockId</UCSElementPath>
Functional address of an FBlock</xs:documentation>
																	</xs:annotation>
																</xs:attribute>
																<xs:attribute name="FunctionId" type="Number" use="required">
																	<xs:annotation>
																		<xs:documentation>
																			<UCSElementPath>/Unicens/Script/MsgSend/@FunctionId</UCSElementPath>
Determines the ID of function which message is directed</xs:documentation>
																	</xs:annotation>
																</xs:attribute>
																<xs:attribute name="OpTypeRequest" type="Number" use="required">
																	<xs:annotation>
																		<xs:documentation>
																			<UCSElementPath>/Unicens/Script/MsgSend/@OpTypeRequest</UCSElementPath>
OpType request sent via message to a particular node by calling script</xs:documentation>
																	</xs:annotation>
																</xs:attribute>
																<xs:attribute name="OpTypeResponse" type="Number" use="optional">
																	<xs:annotation>
																		<xs:documentation>
																			<UCSElementPath>/Unicens/Script/MsgSend/@OpTypeResponse</UCSElementPath>
Expected OpType response of the message</xs:documentation>
																	</xs:annotation>
																</xs:attribute>
																<xs:attribute name="PayloadRequest" type="HexData" use="required">
																	<xs:annotation>
																		<xs:documentation>
																			<UCSElementPath>/Unicens/Script/MsgSend/@PayloadRequest</UCSElementPath>
Payload of the INIC message being sent</xs:documentation>
																	</xs:annotation>
																</xs:attribute>
																<xs:attribute name="PayloadResponse" type="HexData" use="optional">
																	<xs:annotation>
																		<xs:documentation>
																			<UCSElementPath>/Unicens/Script/MsgSend/@PayloadResponse</UCSElementPath>
Response payload of the INIC message sent</xs:documentation>
																	</xs:annotation>
																</xs:attribute>
															</xs:extension>
														</xs:complexContent>
													</xs:complexType>
												</xs:element>
												<xs:element name="Pause">
													<xs:annotation>
														<xs:documentation>
															<UCSElementPath>/Unicens/Script/Pause</UCSElementPath>
Specifies the pause which shall be set before sending the configuration message.</xs:documentation>
													</xs:annotation>
													<xs:complexType>
														<xs:complexContent>
															<xs:extension base="SpecifiedElement">
																<xs:attribute name="WaitTime" type="Number" use="required">
																	<xs:annotation>
																		<xs:documentation>
																			<UCSElementPath>/Unicens/Script/Pause/@WaitTime</UCSElementPath>
Time for which pause is to be done</xs:documentation>
																	</xs:annotation>
																</xs:attribute>
															</xs:extension>
														</xs:complexContent>
													</xs:complexType>
												</xs:element>
											</xs:choice>
										</xs:sequence>
										<xs:attribute name="Name" type="xs:string" use="required">
											<xs:annotation>
												<xs:documentation>
													<UCSElementPath>/Unicens/Script/@Name</UCSElementPath>
Name of the Script</xs:documentation>
											</xs:annotation>
										</xs:attribute>
									</xs:extension>
								</xs:complexContent>
							</xs:complexType>
						</xs:element>
						<xs:element name="Driver">
							<xs:complexType>
								<xs:complexContent>
									<xs:extension base="DescribedElement">
										<xs:all>
											<xs:element name="Alsa" minOccurs="0">
												<xs:complexType>
													<xs:complexContent>
														<xs:extension base="DescribedElement">
															<xs:attribute name="BufferSize" type="Number" use="required"/>
															<xs:attribute name="BufferCount" type="Number" use="required"/>
															<xs:attribute name="Name" type="xs:string" use="required"/>
															<xs:attribute name="AudioChannelCount" type="Number" use="required"/>
															<xs:attribute name="AudioChannelResolution" use="required">
																<xs:simpleType>
																	<xs:restriction base="xs:string">
																		<xs:enumeration value="8bit"/>
																		<xs:enumeration value="16bit"/>
																		<xs:enumeration value="24bit"/>
																		<xs:enumeration value="32bit"/>
																	</xs:restriction>
																</xs:simpleType>
															</xs:attribute>
														</xs:extension>
													</xs:complexContent>
												</xs:complexType>
											</xs:element>
											<xs:element name="Cdev" minOccurs="0">
												<xs:complexType>
													<xs:complexContent>
														<xs:extension base="DescribedElement">
															<xs:attribute name="BufferSize" type="Number" use="required"/>
															<xs:attribute name="BufferCount" type="Number" use="required"/>
															<xs:attribute name="Name" type="xs:string" use="required"/>
														</xs:extension>
													</xs:complexContent>
												</xs:complexType>
											</xs:element>
											<xs:element name="V4l2" minOccurs="0">
												<xs:complexType>
													<xs:complexContent>
														<xs:extension base="DescribedElement">
															<xs:attribute name="BufferSize" type="Number" use="required"/>
															<xs:attribute name="BufferCount" type="Number" use="required"/>
															<xs:attribute name="Name" type="xs:string" use="required"/>
														</xs:extension>
													</xs:complexContent>
												</xs:complexType>
											</xs:element>
										</xs:all>
										<xs:attribute name="Name" type="xs:string" use="required"/>
									</xs:extension>
								</xs:complexContent>
							</xs:complexType>
						</xs:element>
					</xs:choice>
					<xs:attribute name="AsyncBandwidth" type="Number" use="required">
						<xs:annotation>
							<xs:documentation>
								<UCSElementPath>/Unicens/@AsyncBandwidth</UCSElementPath>
Asynchronous bandwidth of the Unicens network.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="Network" use="optional">
						<xs:simpleType>
							<xs:restriction base="xs:string">
								<xs:enumeration value="INICnet-50"/>
								<xs:enumeration value="INICnet-150"/>
								<xs:enumeration value="MOST150"/>
							</xs:restriction>
						</xs:simpleType>
					</xs:attribute>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<xs:complexType name="Connection">
		<xs:complexContent>
			<xs:extension base="SpecifiedElement">
				<xs:choice minOccurs="2" maxOccurs="2">
					<xs:element name="NetworkSocket">
						<xs:annotation>
							<xs:documentation>
								<UCSElementPath>/Connection/NetworkSocket</UCSElementPath>
Configuration Structure of a Network Socket</xs:documentation>
						</xs:annotation>
						<xs:complexType>
							<xs:complexContent>
								<xs:extension base="NetworkSocketType"/>
							</xs:complexContent>
						</xs:complexType>
					</xs:element>
					<xs:element name="USBSocket">
						<xs:annotation>
							<xs:documentation>
								<UCSElementPath>/Connection/USBSocket</UCSElementPath>
Configuration Structure of a USB Socket.</xs:documentation>
						</xs:annotation>
						<xs:complexType>
							<xs:complexContent>
								<xs:extension base="SpecifiedElement">
									<xs:attribute name="EndpointAddress" type="Number" use="required">
										<xs:annotation>
											<xs:documentation>
												<UCSElementPath>/Connection/USBSocket/@EndpointAddress</UCSElementPath>
Address of a USB Endpoint.
This attribute corresponds with the parameter EndpointAddress of the INIC function INIC.USBSocketCreate</xs:documentation>
										</xs:annotation>
									</xs:attribute>
									<xs:attribute name="FramesPerTransaction" type="Number" use="required">
										<xs:annotation>
											<xs:documentation>
												<UCSElementPath>/Connection/USBSocket/@FramesPerTransaction</UCSElementPath>
 FramesPerTransaction defines the number of data frames that are transferred within one USB bulk transaction.The value depends on the data type being used.
 The minimum number of FramesPerTransaction is only 7 in sync connection. On AVP connection its 2 or 0xFFFF.</xs:documentation>
										</xs:annotation>
									</xs:attribute>
								</xs:extension>
							</xs:complexContent>
						</xs:complexType>
					</xs:element>
					<xs:element name="MediaLBSocket">
						<xs:annotation>
							<xs:documentation>
								<UCSElementPath>/Connection/MediaLBSocket</UCSElementPath>
Configuration Structure of MediaLB Socket</xs:documentation>
						</xs:annotation>
						<xs:complexType>
							<xs:complexContent>
								<xs:extension base="SpecifiedElement">
									<xs:attribute name="ChannelAddress" type="Number" use="required">
										<xs:annotation>
											<xs:documentation>
												<UCSElementPath>/Connection/MediaLBSocket/@ChannelAddress</UCSElementPath>
MLB Channel address.
This attribute corresponds with the parameter ChannelAddress of the INIC function INIC.MediaLBSocketCreate.</xs:documentation>
										</xs:annotation>
									</xs:attribute>
									<xs:attribute name="Bandwidth" type="xs:integer" use="required">
										<xs:annotation>
											<xs:documentation>
												<UCSElementPath>/Connection/MediaLBSocket/@Bandwidth</UCSElementPath>
Required socket bandwidth in bytes.
This attribute corresponds with the parameter Bandwidth of the INIC function INIC.StreamSocketCreate.</xs:documentation>
										</xs:annotation>
									</xs:attribute>
								</xs:extension>
							</xs:complexContent>
						</xs:complexType>
					</xs:element>
					<xs:element name="StreamSocket">
						<xs:annotation>
							<xs:documentation>
								<UCSElementPath>/Connection/StreamSocket</UCSElementPath>
Configuration Structure of a streaming data Socket</xs:documentation>
						</xs:annotation>
						<xs:complexType>
							<xs:complexContent>
								<xs:extension base="SpecifiedElement">
									<xs:attribute name="StreamPinID" type="StreamSocketStreamPinID" use="required">
										<xs:annotation>
											<xs:documentation>
												<UCSElementPath>/Connection/StreamSocket/@StreamPinID</UCSElementPath>
ID of the serial interface pin.
This attribute corresponds with the parameter StreamPinID of the INIC function INIC.StreamSocketCreate.</xs:documentation>
										</xs:annotation>
									</xs:attribute>
									<xs:attribute name="Bandwidth" type="xs:integer" use="required">
										<xs:annotation>
											<xs:documentation>
												<UCSElementPath>/Connection/StreamSocket/@Bandwidth</UCSElementPath>
Required socket bandwidth in bytes.
This attribute corresponds with the parameter Bandwidth of the INIC function INIC.StreamSocketCreate.</xs:documentation>
										</xs:annotation>
									</xs:attribute>
								</xs:extension>
							</xs:complexContent>
						</xs:complexType>
					</xs:element>
					<xs:element name="Splitter" type="SplitterCombinerType">
						<xs:annotation>
							<xs:documentation>
								<UCSElementPath>/Connection/Splitter</UCSElementPath>
Configuration Structure of a splitter resource.
A splitter enables two variants of routing to be set-up. The first variant is a splitter created with a peripheral socket.
It enables data routing from a specified segment of the peripheral socket to a Network socket. 
The second variant is a splitter created with a Network socket. 
This variant enables data routing in its whole (no segments) from the Network socket to multiple peripheral sockets.
</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="Combiner" type="SplitterCombinerType">
						<xs:annotation>
							<xs:documentation>
								<UCSElementPath>/Connection/Combiner</UCSElementPath>
Configuration Structure of a combiner resource.
A combiner enables streaming data to be routed from a Network socket to a specified segment of a peripheral socket. 
The same combiner may be used in multiple connections, which enables grouping of data streams from multiple Network sockets into the same peripheral socket.
</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:choice>
				<xs:attribute name="Driver" type="xs:string" use="optional"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:simpleType name="Number">
		<xs:annotation>
			<xs:documentation>Hexadecimal or decimal number in the format 0xd..d</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:pattern value="([0-9]+)|(0x[0-9a-fA-F]+)"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="USBPortPhysicalLayer">
		<xs:annotation>
			<xs:documentation>Physical Layer of USB port</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:enumeration value="Standard"/>
			<xs:enumeration value="HSIC"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="MediaLBPortClockConfig">
		<xs:annotation>
			<xs:documentation>Clock Config of MediaLB port</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:enumeration value="256Fs"/>
			<xs:enumeration value="512Fs"/>
			<xs:enumeration value="1024Fs"/>
			<xs:enumeration value="2048Fs"/>
			<xs:enumeration value="3072Fs"/>
			<xs:enumeration value="4096Fs"/>
			<xs:enumeration value="6114Fs"/>
			<xs:enumeration value="8192Fs"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="StreamPortClockConfig">
		<xs:annotation>
			<xs:documentation>Clock Config of Stream port</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:enumeration value="8Fs"/>
			<xs:enumeration value="16fs"/>
			<xs:enumeration value="32Fs"/>
			<xs:enumeration value="64Fs"/>
			<xs:enumeration value="128Fs"/>
			<xs:enumeration value="256Fs"/>
			<xs:enumeration value="512Fs"/>
			<xs:enumeration value="Willdcard"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="StreamPortDataAlignment">
		<xs:annotation>
			<xs:documentation>Data Alignment of Stream port</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:enumeration value="Left16Bit"/>
			<xs:enumeration value="Left24Bit"/>
			<xs:enumeration value="Right16Bit"/>
			<xs:enumeration value="Right24Bit"/>
			<xs:enumeration value="Seq"/>
			<xs:enumeration value="TDM16Bit"/>
			<xs:enumeration value="TDM24Bit"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="StreamSocketStreamPinID">
		<xs:annotation>
			<xs:documentation>Stream Pin ID of Stream socket</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:enumeration value="SRXA0"/>
			<xs:enumeration value="SRXA1"/>
			<xs:enumeration value="SRXB0"/>
			<xs:enumeration value="SRXB1"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="SyncConnectionMuteMode">
		<xs:annotation>
			<xs:documentation>Mute Mode of Sync connection</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:enumeration value="NoMuting"/>
			<xs:enumeration value="MuteSignal"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="AVPConnectionIsocPacketSize">
		<xs:annotation>
			<xs:documentation>Isoc Packet Size of AVP connection</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:integer">
			<xs:enumeration value="188"/>
			<xs:enumeration value="196"/>
			<xs:enumeration value="206"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="I2CPortCreateSpeed">
		<xs:annotation>
			<xs:documentation>Speed parameter of I2CPortCreate</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:enumeration value="SlowMode"/>
			<xs:enumeration value="FastMode"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="I2CPortWriteMode">
		<xs:annotation>
			<xs:documentation>Mode parameter of I2CPortWrite</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:enumeration value="DefaultMode"/>
			<xs:enumeration value="RepeatedStartMode"/>
			<xs:enumeration value="BurstMode"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="HexData">
		<xs:annotation>
			<xs:documentation>String which represents byte array as hexadecimal digits with space after each two digits</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:pattern value="([0-9a-fA-F]{2}(\s+[0-9a-fA-F]{2})*)?"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:complexType name="SplitterCombinerType">
		<xs:annotation>
			<xs:documentation>
				<UCSElementPath>/SplitterCombinerType</UCSElementPath>
A splitter combiner type allocated on network</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="SpecifiedElement">
				<xs:sequence>
					<xs:element name="NetworkSocket" type="SCNetworkSocketType" maxOccurs="unbounded">
						<xs:annotation>
							<xs:documentation>
								<UCSElementPath>/SplitterCombinerType/NetworkSocket</UCSElementPath>
								A Network Socket encapsulates the configuration settings that are required to
access data streams on specific network channels.</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
				<xs:attribute name="BytesPerFrame" type="xs:integer" use="required">
					<xs:annotation>
						<xs:documentation>
							<UCSElementPath>/SplitterCombinerType/@BytesPerFrame</UCSElementPath>
Total number of data bytes to be transferred each network frame.
</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="NetworkSocketType">
		<xs:annotation>
			<xs:documentation>
				<UCSElementPath>/NetworkSocketType</UCSElementPath>Type assigned to Network socket in a network.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="SpecifiedElement">
				<xs:attribute name="Route" use="required">
					<xs:annotation>
						<xs:documentation>
							<UCSElementPath>/NetworkSocketType/@Route</UCSElementPath>
A (virtual) route is a logical unidirectional connection between two endpoints. An endpoint acts as a Network connection in INIC plus the internal linked resources</xs:documentation>
					</xs:annotation>
					<xs:simpleType>
						<xs:restriction base="xs:string">
							<xs:minLength value="1"/>
							<xs:pattern value=".*[^\s].*"/>
						</xs:restriction>
					</xs:simpleType>
				</xs:attribute>
				<xs:attribute name="Bandwidth" type="xs:integer" use="required">
					<xs:annotation>
						<xs:documentation>
							<UCSElementPath>/NetworkSocketType/@Bandwidth</UCSElementPath>Bandwidth (in bytes) allocated on the network</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="IsActive" type="xs:boolean" use="optional">
					<xs:annotation>
						<xs:documentation>
							<UCSElementPath>/NetworkSocketType/@IsActive</UCSElementPath>Determines the state of Network Socket type. It can take values as : True or False</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="RouteId" type="Number" use="optional">
					<xs:annotation>
						<xs:documentation>
							<UCSElementPath>/NetworkSocketType/@RouteId</UCSElementPath>
User-defined route identifier</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="SCNetworkSocketType">
		<xs:annotation>
			<xs:documentation>
				<UCSElementPath>/SCNetworkSocketType</UCSElementPath>Type of SC Network Socket in the network for a node</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="NetworkSocketType">
				<xs:attribute name="Offset" type="xs:integer" use="required">
					<xs:annotation>
						<xs:documentation>
							<UCSElementPath>/SCNetworkSocketType/@Offset</UCSElementPath>
Offset from where the socket data should be routed from a splitter.
</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="SpecifiedElement">
		<xs:complexContent>
			<xs:extension base="DescribedElement">
				<xs:attribute name="Name" type="xs:string"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="DescribedElement">
		<xs:attribute name="Description" type="xs:string"/>
		<xs:attribute ref="Version"/>
	</xs:complexType>
	<xs:attribute name="Version" type="xs:string"/>
</xs:schema>
